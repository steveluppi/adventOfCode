require_relative '../../helpers'
require 'io/console'
require 'set'

$debug = true


class AOC
  def self.silver(lines)
    filesystem = []
    blocks = []
    line = lines.first.split('')
    loop do 
      break if line.empty?
      blocks << line.shift(2).map(&:to_i)
    end

    blocks.each_with_index do |b,i|
      blocks[i][0].to_i.times {|t| filesystem << i}
      blocks[i][1].to_i.times {|t| filesystem << '.'}
    end

    # debug filesystem.join
    working_at = 0
    pulling_from = filesystem.length-1
    # debug working_at, pulling_from

    loop do
      $debug=true if working_at > 49915
      # $debug=false if working_at > 50000
      debug "Loop iteration start with #{working_at} and #{pulling_from}"
      break if working_at > pulling_from
      
      loop do
        break unless filesystem[pulling_from] == '.'
        pulling_from -=1
      end
      break if working_at > pulling_from

      debug "  Loop iteration is now #{working_at} and #{pulling_from}"

      if filesystem[working_at] == '.'
        debug "Actually move things from #{pulling_from} to #{working_at} which is #{filesystem[pulling_from]}"
        filesystem[working_at] = filesystem[pulling_from]
        filesystem[pulling_from] = '.'
        pulling_from -= 1
        # debug filesystem.join
      end
      working_at += 1
    end
    # debug filesystem

    $sum = 0
    puts
    filesystem.each_with_index do |v, i|
      # print v=='.' ? '.'.green : '#'.red 
      $sum += (v*i) unless v == '.'
    end
    puts

    # idx = filesystem.index('.')
    # puts "First . is at #{idx}"
    # for n in 0..5 do
    #   puts "Index #{idx+n} is #{filesystem[idx+n]}"
    # end

    p $sum
    $sum
  end

  def self.silver_clever(lines)
    blocks = []
    line = lines.first.split('')
    loop do 
      break if line.empty?
      blocks << line.shift(2).map(&:to_i)
    end

    at_index = 0
    last_index = blocks.length-1
    puts "We start with 0 and goto #{last_index}"
    
    filesys = []
    filler = []

    loop do
      debug "Doing the loop at #{at_index} and working from #{last_index}".green

      if at_index > last_index
        debug "So we add the rest of the filler"
        filesys.concat(filler)
        break
      end

      work = []
      # add the blocks
      blocks[at_index][0].times { |i| work << at_index.to_s }
      debug "  Adding the blocks makes #{work}"

      # fill the gaps
      debug "  Filler needs to be #{blocks[at_index][1]}"
      loop do
        break if filler.length > blocks[at_index][1]
        blocks[last_index][0].times {|i| filler.unshift last_index.to_s}
        last_index -= 1
        debug "  ...filler is now #{filler}"
      end
      break if at_index > last_index

      debug "  Time to fill in gaps"

      # fill the gaps with bits from the end
      blocks[at_index][1].times {|i| work << filler.pop }

      debug "  ... work is now #{work} after iteration".red
      debug "      leaving #{filler} behind"

      # save our work
      filesys.concat(work)
      debug "Filesystem is #{filesys}".green

      at_index += 1
    end

    $checksum=0
    puts
    filesys.map(&:to_i).each_with_index do |v, i|
      # puts "Checksum at #{i} is #{v} is #{v*i}"
      print v=='.' ? '.'.green : '#'.red
      $checksum += v*i
    end
    puts

    p $checksum
    $checksum
  end

  def self.gold(lines)
  end
end
